package presentation;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;

import model.Account;

import java.util.*;

public class EditDeleteAccount extends JFrame{

	private static final int WIDTH = 450;
	private static int HEIGHT = 320;
	
	public JPanel panel = new JPanel();
	private JLabel lblAccountHolderCNP = new JLabel("Account Holder CNP");
	private JLabel lblAccountId = new JLabel("Account Id");
	private JLabel lblBalance = new JLabel("Balance");
	private JLabel lblAccountType = new JLabel("Account Type");
	public JTextField tfAccountHolderCNP = new JTextField();
	public JComboBox cbAccounts = new JComboBox();
	private JTextField tfBalance = new JTextField();
	public JRadioButton rdbtnSavingAccount = new JRadioButton("Saving Account");
	public JRadioButton rdbtnSpendingAccount = new JRadioButton("Spending Account");
	private JButton btnDelete = new JButton("Delete");
	private JButton btnOk = new JButton("Ok");
	public HashSet<Account> accounts = new HashSet<>();
	
	public EditDeleteAccount(String name)
	{
		super(name);
		setResizable(false);
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		this.setVisible(true);
		this.setSize(WIDTH, HEIGHT);
		panel.setLayout(null);
		
		lblAccountHolderCNP.setBounds(20, 20, 120, 25);
		lblAccountId.setBounds(20, 55, 120, 25);
		lblBalance.setBounds(20, 90, 120, 25);
		lblAccountType.setBounds(20, 125, 120, 25);
		panel.add(lblAccountHolderCNP);
		panel.add(lblAccountId);
		panel.add(lblBalance);
		panel.add(lblAccountType);
		
		tfAccountHolderCNP.setBounds(170, 20, 150, 25);
		cbAccounts.setBounds(170, 55, 150, 25);
		tfBalance.setBounds(170, 90, 150, 25);
		panel.add(tfAccountHolderCNP);
		panel.add(cbAccounts);
		panel.add(tfBalance);
		
		rdbtnSavingAccount.setBounds(170, 125, 150, 25);
		rdbtnSavingAccount.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if(rdbtnSpendingAccount.isSelected() == true)
				{
					rdbtnSpendingAccount.setSelected(false);
				}
			}
		});
		rdbtnSpendingAccount.setBounds(170, 160, 150, 25);
		rdbtnSpendingAccount.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if(rdbtnSavingAccount.isSelected() == true)
				{
					rdbtnSavingAccount.setSelected(false);
				}
			}
		});
		panel.add(rdbtnSavingAccount);
		panel.add(rdbtnSpendingAccount);
		
		btnDelete.setForeground(Color.WHITE);
		btnDelete.setBackground(Color.BLACK);
		btnDelete.setBounds(120, 210, 100, 30);
		panel.add(btnDelete);
		
		btnOk.setForeground(Color.WHITE);
		btnOk.setBackground(Color.BLACK);
		btnOk.setBounds(340, 20, 70, 25);
		panel.add(btnOk);
		
		getContentPane().add(panel);
	}
	
	public String getHolderCNP()
	{
		return tfAccountHolderCNP.getText();
	}
	
	public Double getBalance()
	{
		if(Double.valueOf(tfBalance.getText()) != null)	return Double.valueOf(tfBalance.getText());
		return 0.0;
	}
	
	public int getWidth()
	{
		return this.WIDTH;
	}
	
	public int getHeight()
	{
		return this.HEIGHT;
	}
	
	public void setHeight(int h)
	{
		this.HEIGHT = h;
	}
	
	public void btnOkAction(ActionListener okAL)
	{
		btnOk.addActionListener(okAL);
	}
	
	public void deleteAction(ActionListener dal)
	{
		btnDelete.addActionListener(dal);
	}
	
	public void showData()
	{
		cbAccounts.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				for(Account a : accounts)
				{
					if(a.getAccountId() == Integer.valueOf(cbAccounts.getSelectedItem().toString()))
					{
						
					}
				}
			}
		});
	}
}
